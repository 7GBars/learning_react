import React, { useState } from 'react';

type TFunctionToStateProps = {}

export const FunctionToState: React.FC<TFunctionToStateProps> = ({}) => {
  // üéØ –ö–ï–ô–°: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã
  const [fetcher, setFetcher] = useState(() => mockFetcher);

  return (
    <>
      <button
      onClick={(e) => {
        setFetcher(() => realFetcher);
      }}>–°–º–µ–Ω–∏—Ç—å —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞</button>
      <button
      onClick={(e) => {
        fetcher()
      }}>–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</button>
    </>
  );
}

// üìç –î–†–£–ì–ò–ï –ö–ï–ô–°–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:

// üéØ 1. –°–¢–†–ê–¢–ï–ì–ò–ò –û–ü–õ–ê–¢–´
// const [paymentMethod, setPaymentMethod] = useState(() => stripePayment)
// setPaymentMethod(() => paypalPayment)

// üéØ 2. –¢–ï–ú–´/–°–ö–ò–ù–´
// const [themeApplier, setThemeApplier] = useState(() => applyDarkTheme)
// setThemeApplier(() => applyLightTheme)

// üéØ 3. –ú–ï–ñ–î–£–ù–ê–†–û–î–ò–ó–ê–¶–ò–Ø
// const [translator, setTranslator] = useState(() => enTranslator)
// setTranslator(() => ruTranslator)

// üéØ 4. –ê–õ–ì–û–†–ò–¢–ú–´ –°–û–†–¢–ò–†–û–í–ö–ò
// const [sorter, setSorter] = useState(() => sortByDate)
// setSorter(() => sortByName)

// üéØ 5. –í–ê–õ–ò–î–ê–¶–ò–Ø –§–û–†–ú
// const [validator, setValidator] = useState(() => basicValidator)
// setValidator(() => strictValidator)

// üéØ 6. –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–•
// const [cacheStrategy, setCacheStrategy] = useState(() => memoryCache)
// setCacheStrategy(() => localStorageCache)

const mockFetcher = () => {
  setTimeout(() => {
    console.log('–ó–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª')
  }, 2000)
}
const realFetcher = async () => {
  debugger;
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');
    const json = await response.json();
    console.log(json);
    debugger;
  } catch (error) {
    console.error('Fetch error:', error);
  }
};